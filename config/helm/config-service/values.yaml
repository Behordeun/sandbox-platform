# Default values for config-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2
image:
  repository: sandbox-config-service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.0"
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
service:
  type: ClusterIP
  port: 8000
  targetPort: 8000
ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: config-service.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: config-service-tls
  #    hosts:
  #      - config-service.local
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
nodeSelector: {}
tolerations: []
affinity: {}
# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
# Environment variables
env:
  - name: HOST
    value: "0.0.0.0"
  - name: PORT
    value: "8000"
  - name: REDIS_URL
    value: "redis://redis-master:6379/1"
  - name: CONFIG_STORAGE_TYPE
    value: "redis"
  - name: DEFAULT_ENVIRONMENT
    value: "development"
  - name: SUPPORTED_ENVIRONMENTS
    value: '["development", "staging", "production"]'
  - name: SCHEMA_VALIDATION_ENABLED
    value: "true"
  - name: AUDIT_LOGGING_ENABLED
    value: "true"
  - name: VERSIONING_ENABLED
    value: "true"
  - name: MAX_VERSIONS
    value: "10"
  - name: HOT_RELOAD_ENABLED
    value: "true"
  - name: RELOAD_CHECK_INTERVAL
    value: "30"
  - name: API_KEY_REQUIRED
    value: "false"
  - name: JWT_ALGORITHM
    value: "HS256"
  - name: CORS_ORIGINS
    value: '["*"]'
  - name: DEBUG
    value: "false"
# Secrets
secrets:
  encryptionKey: "your-encryption-key-change-in-production"
  jwtSecretKey: "your-jwt-secret-key-change-in-production"
# Health checks
healthCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1
readinessCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1
# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels: {}
# Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: api-gateway
      ports:
        - protocol: TCP
          port: 8000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
      ports:
        - protocol: TCP
          port: 6379
# Persistent Volume for file storage (when using file storage backend)
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 1Gi
  mountPath: /app/configs
# Volume mounts for temporary files
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache
volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
# Configuration for file storage backend
fileStorage:
  enabled: false
  path: /app/configs
