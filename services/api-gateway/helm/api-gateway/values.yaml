# Default values for api-gateway.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 3

image:
  repository: sandbox-api-gateway
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: api-gateway.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: api-gateway-tls
  #    hosts:
  #      - api-gateway.local

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Environment variables
env:
  - name: HOST
    value: "0.0.0.0"
  - name: PORT
    value: "8080"
  - name: AUTH_SERVICE_URL
    value: "http://auth-service:8000"
  - name: CONFIG_SERVICE_URL
    value: "http://config-service:8000"
  - name: REDIS_URL
    value: "redis://redis-master:6379/2"
  - name: RATE_LIMIT_ENABLED
    value: "true"
  - name: RATE_LIMIT_REQUESTS
    value: "100"
  - name: RATE_LIMIT_WINDOW
    value: "60"
  - name: CIRCUIT_BREAKER_ENABLED
    value: "true"
  - name: CIRCUIT_BREAKER_FAILURE_THRESHOLD
    value: "5"
  - name: CIRCUIT_BREAKER_RECOVERY_TIMEOUT
    value: "60"
  - name: METRICS_ENABLED
    value: "true"
  - name: REQUEST_LOGGING_ENABLED
    value: "true"
  - name: RESPONSE_LOGGING_ENABLED
    value: "true"
  - name: CORS_ORIGINS
    value: '["*"]'
  - name: DEBUG
    value: "false"

# Secrets
secrets:
  jwtSecretKey: "your-jwt-secret-key-change-in-production"
  # Optional: base64-encoded or plain DATABASE_URL value
  databaseUrl: ""

# Health checks
healthCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3
  successThreshold: 1

# Service Monitor for Prometheus
serviceMonitor:
  enabled: false
  namespace: monitoring
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  labels: {}

# Network Policy
networkPolicy:
  enabled: false
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8080
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: auth-service
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: config-service
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: auth-service
      ports:
      - protocol: TCP
        port: 8000
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: config-service
      ports:
      - protocol: TCP
        port: 8000
    - to:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: redis
      ports:
      - protocol: TCP
        port: 6379

# Volume mounts for temporary files
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache

volumes:
  - name: tmp
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
