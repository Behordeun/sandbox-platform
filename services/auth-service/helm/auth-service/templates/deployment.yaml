apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-service.fullname" . }}
  labels:
    {{- include "auth-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "auth-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "auth-service.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "auth-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.config.port }}
              protocol: TCP
          env:
            # Application settings
            - name: APP_NAME
              value: {{ .Values.config.appName | quote }}
            - name: APP_VERSION
              value: {{ .Values.config.appVersion | quote }}
            - name: DEBUG
              value: {{ .Values.config.debug | quote }}
            
            # Database settings
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "auth-service.fullname" . }}-secrets
                  key: database-url
            
            # JWT settings
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "auth-service.fullname" . }}-secrets
                  key: jwt-secret-key
            - name: JWT_ALGORITHM
              value: {{ .Values.config.jwtAlgorithm | quote }}
            - name: JWT_ACCESS_TOKEN_EXPIRE_MINUTES
              value: {{ .Values.config.jwtAccessTokenExpireMinutes | quote }}
            - name: JWT_REFRESH_TOKEN_EXPIRE_DAYS
              value: {{ .Values.config.jwtRefreshTokenExpireDays | quote }}
            
            # OAuth2 settings
            - name: OAUTH2_ISSUER_URL
              value: {{ include "auth-service.oauth2IssuerUrl" . | quote }}
            - name: OAUTH2_JWKS_URI
              value: {{ include "auth-service.oauth2JwksUri" . | quote }}
            
            # NIN/BVN Integration settings
            - name: DOJAH_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "auth-service.fullname" . }}-secrets
                  key: dojah-api-key
                  optional: true
            - name: DOJAH_BASE_URL
              value: {{ .Values.config.dojaBaseUrl | quote }}
            
            # CORS settings
            - name: CORS_ORIGINS
              value: {{ .Values.config.corsOrigins | toJson | quote }}
            - name: CORS_ALLOW_CREDENTIALS
              value: {{ .Values.config.corsAllowCredentials | quote }}
            - name: CORS_ALLOW_METHODS
              value: {{ .Values.config.corsAllowMethods | toJson | quote }}
            - name: CORS_ALLOW_HEADERS
              value: {{ .Values.config.corsAllowHeaders | toJson | quote }}
            
            # Server settings
            - name: HOST
              value: {{ .Values.config.host | quote }}
            - name: PORT
              value: {{ .Values.config.port | quote }}
          
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      
      volumes:
        - name: tmp
          emptyDir: {}
      
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

