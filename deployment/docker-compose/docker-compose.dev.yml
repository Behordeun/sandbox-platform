services:
  # PostgreSQL Database
  postgres:
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - sandbox-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sandbox"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sandbox-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6378:6379"
    volumes:
      - redis_data:/data
    networks:
      - sandbox-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Auth Service
  auth-service:
    build:
      context: ../../services/auth-service
      dockerfile: Dockerfile
    env_file: .env
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEBUG=${DEBUG}
      - DOJA_API_KEY=${DOJA_API_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEBUG=${DEBUG}
      - DOJA_API_KEY=${DOJA_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sandbox-network
    volumes:
      - ../../services/auth-service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Config Service
  config-service:
    build:
      context: ../../services/config-service
      dockerfile: Dockerfile
    container_name: sandbox-config-service
    env_file: .env
    env_file: .env
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CONFIG_STORAGE_TYPE=${CONFIG_STORAGE_TYPE}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEBUG=${DEBUG}
      - VERSIONING_ENABLED=${VERSIONING_ENABLED}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CONFIG_STORAGE_TYPE=${CONFIG_STORAGE_TYPE}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - DEBUG=${DEBUG}
      - VERSIONING_ENABLED=${VERSIONING_ENABLED}
    ports:
      - "8001:8000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sandbox-network
    volumes:
      - ../../services/config-service:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway
  api-gateway:
    build:
      context: ../../services/api-gateway
      dockerfile: Dockerfile
    container_name: sandbox-api-gateway
    env_file: .env
    env_file: .env
    environment:
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - CONFIG_SERVICE_URL=${CONFIG_SERVICE_URL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - AUTH_SERVICE_URL=${AUTH_SERVICE_URL}
      - CONFIG_SERVICE_URL=${CONFIG_SERVICE_URL}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/2
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=["http://localhost:3000"]
      - DEBUG=${DEBUG}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - METRICS_ENABLED=${METRICS_ENABLED}
      - DEBUG=${DEBUG}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED}
      - METRICS_ENABLED=${METRICS_ENABLED}
    ports:
      - "8080:8080"
    depends_on:
      auth-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sandbox-network
    volumes:
      - ../../services/api-gateway:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8080 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus (Optional - for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: sandbox-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - sandbox-network
    profiles:
      - monitoring

  # Grafana (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: sandbox-grafana
    ports:
      - "3001:3000"
    env_file: .env
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - sandbox-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sandbox-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
